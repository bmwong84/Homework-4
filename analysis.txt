//Bryant Wong
//CSCI 2421 Homework 4 Analysis

//f(n) = 1
HW4::MyVector::MyVector()	
{
	vec = new ItemType[vsize]; 		//f(n) = 1   (declaring a value equal to another)
}


//f(n) = 1
HW4::MyVector::~MyVector()
{
	delete[] vec;			//f(n) = 1  (deleting a pointer)
}


//f(n) = 1
 HW4::ItemType HW4::MyVector::operator[](int index)
{
	return vec[index];		//f(n) = 1	(access a variable in an array)
}


///f(n) = 3
void HW4::MyVector::pop_back()
{
	if (vsize == 0)			//f(n)=1	(access a variable)
		std::cout << "Vector is empty, cannot remove any items" << std::endl;	//f(n) = 0  
	else if (vsize > 0)	//f(n) = 1	(access a variable)
		vsize--;		//f(n) = 1	access a variable
}



//f(n) = 7 + n
void HW4::MyVector::push_back(ItemType& value)
{
	ItemType* temp = nullptr;				//f(n) = 1 	(access a variable)
	temp = new ItemType[vsize+1];				//f(n) = 1	(access a variable)
	for (int count = 0; count < vsize; count++)		//f(n) = n	(worst case, runs to value n)
		temp[count] = vec[count];			//f(n) = 1	(access a variable)
	vsize++;						//f(n) = 1	(access a variable)	
	temp[vsize - 1] = value;				//f(n) = 1 	(access a variable)
	delete[] vec;						//f(n) = 1	(deleting a pointer)
	vec = temp;						//f(n) = 1	(access a variable)	
	std::cout << value << " added to array" << std::endl;	//f(n) = 0 	
}


//f(n) = 1
int HW4::MyVector::size()
{
	return vsize;		//f(n) = 1	(access a varaible)
}


//f(n) = 4
bool HW4::MyVector::empty()
{
	if (vsize == 0)		//f(n) = 1	(access a variable)
		return true;	//f(n) = 1 	(access a variable)
	else			//f(n) = 1	(access a variable)
		return false;	//f(n) = 1 	(access a variable)
}




//f(n) = 4 + n
int HW4::MyVector::search(ItemType& value)
{
	int index = 0;			//f(n) = 1 	(simple declaration)
	for (int index = 0; index < vsize; index++)		//f(n) = n		(worst case n)
	{
		if (vec[index] == value)		//f(n) = 1	(access a variable)
			return index;			//f(n) = 1	(access a variable)
	}
	return -1;					//f(n) = 1	(access a variable)


//f(1)+f(1)+f(1)+f(3)+f(7+n)+f(1)+f(4)+f(n+4) = O(n)